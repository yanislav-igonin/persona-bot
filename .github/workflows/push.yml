name: Push

on: push

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Use Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
    - name: Install dependencies
      run: npm ci
    - name: Lint
      run: npm run lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Use Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run typecheck

  build:
    needs: [typecheck, lint]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Use Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build
    - name: Upload build
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./dist

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./dist
      - name: Build docker image and push to GitHub registry
        uses: docker/build-push-action@v5
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          image: yanislav-igonin/persona-bot/persona-bot
          dockerfile: Dockerfile
          tags: latest

  # deploy:
  #   needs: release
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Deploy
  #     uses: appleboy/ssh-action@master
  #     env:
  #       REGISTRY: docker.pkg.github.com/yanislav-igonin/ranks-bot
  #       SERVICE_NAME: persona-bot
  #     with:
  #       host: ${{ secrets.VPS_HOST }}
  #       username: ${{ secrets.VPS_SSH_USERNAME }}
  #       key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
  #       script: |
  #         docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}
  #         docker pull ${{ env.REGISTRY }}:latest
  #         docker service update --image ${{ env.REGISTRY }}:${{ github.event.release.tag_name }} ${{ env.SERVICE_NAME }}
